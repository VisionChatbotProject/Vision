"""
Django settings for SmartAuthoring project.

Generated by 'django-admin startproject' using Django 3.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from django.utils.translation import gettext_lazy as _

from pathlib import Path
from urllib.parse import urlparse
import json
import os

SMARTAUTHORING_VERSION = '0.6.0'

import SmartAuthoring.config as conf

BASE_DIR = Path(__file__).resolve().parent.parent

##############################################
################## SETTINGS ##################

try:
    with open('config/config.json', 'r') as file:
        conf.config = json.loads(file.read())
except Exception as e:
    if conf._ignore_errors is False:
        print('cannot read config file')

################## SECURITY SETTINGS ##################

DEBUG = conf.read_param('DEBUG', default=False, suggestion=True, type=bool)
SECRET_KEY = conf.read_param('SECRET_KEY', suggestion='AN UNSAFE SECRET KEY')

SMART_STUDY_BACKEND_URL = conf.read_param('URL_BACKEND', default='http://localhost:8000')
SMART_STUDY_FRONTEND_URL = conf.read_param('URL_FRONTEND', default='http://localhost:4200')

# CORS Settings:
CORS_ALLOW_ALL_ORIGINS = False
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOWED_ORIGINS = [
    SMART_STUDY_FRONTEND_URL,
    SMART_STUDY_BACKEND_URL
]

# CSRF Settings:
CSRF_COOKIE_HTTPONLY = True
CSRF_HEADER_NAME = 'CSRF_COOKIE'
CSRF_TRUSTED_ORIGINS = [
    SMART_STUDY_FRONTEND_URL,
]

ALLOWED_HOSTS = [
    'localhost',
    urlparse(SMART_STUDY_BACKEND_URL).hostname,
    urlparse(SMART_STUDY_FRONTEND_URL).hostname,
    *conf.read_param('ALLOWED_HOSTS', default=[], type=list)
]

USE_X_FORWARDED_HOST = conf.read_param('USE_X_FORWARDED_HOST', default=False, suggestion=None, type=bool)
if USE_X_FORWARDED_HOST:
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

################## FILE SETTINGS ##################

# Smartstudy assets config
SMART_STUDY_ASSET_DEFAULT_FILE = ''
DEFAULT_FILE_STORAGE = 'smartstudy_assets.storage.SmartStudyFileSystemStorage'

SMART_STUDY_ASSET_STORE_LOCATION = conf.read_param('ASSET_STORE_LOCATION', default='files/data')
os.makedirs(SMART_STUDY_ASSET_STORE_LOCATION, exist_ok=True)

SMART_STUDY_ASSET_DEFAULT_STORE_LOCATION = conf.read_param('ASSET_DEFAULT_STORE_LOCATION', default='default_files/data')
os.makedirs(SMART_STUDY_ASSET_DEFAULT_STORE_LOCATION, exist_ok=True)

STATIC_ROOT = conf.read_param('STATIC_DIRECTORY', default='files/static')
os.makedirs(STATIC_ROOT, exist_ok=True)

STATIC_URL = '/static/'

TEMP_DIR = conf.read_param('TEMP_DIRECTORY', default='files/temp')
os.makedirs(TEMP_DIR, exist_ok=True)

SCORM_RESOURCES = conf.read_param('SCORM_RESOURCES', default='default_files/scorm_resources')

################## EMAIL SETTINGS ##################

if conf.read_param('MAIL_BACKEND', default='FILE') == 'FILE':
    EMAIL_BACKEND = 'django.core.mail.backends.filebased.EmailBackend'
    EMAIL_FILE_PATH = conf.read_param('MAIL_PATH', default='files/mail')
    os.makedirs(EMAIL_FILE_PATH, exist_ok=True)

if conf.read_param('MAIL_BACKEND', 'FILE') == 'SMTP':
    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
    EMAIL_HOST = conf.read_param('MAIL_HOST', default=None, suggestion='smtp.mail.com')
    EMAIL_PORT = conf.read_param('MAIL_PORT', default=25, type=int)
    EMAIL_HOST_USER = conf.read_param('MAIL_USER', default=None, suggestion='username')
    EMAIL_HOST_PASSWORD = conf.read_param('MAIL_PASSWORD', default=None, suggestion='password')
    EMAIL_USE_TLS = conf.read_param('MAIL_TLS', default=True, type=bool)
    DEFAULT_FROM_EMAIL = conf.read_param('DEFAULT_FROM', default='admin@smartauthoring.com')

################## DATABASE SETTINGS ##################

if conf.read_param('DATABASE_BACKEND', default='SQLITE') == 'SQLITE':
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': conf.read_param('DATABASE_NAME', default='database/sqlite3.db')
        }
    }

################## SETTINGS CHATBOT ##################

ACTIVE_BOTAPI_URL = conf.read_param('ACTIVE_BOTAPI_URL', default="http://localhost:5000/api")
ENABLE_SYNC = conf.read_param('ENABLE_SYNC', default=True)
DOCKER_SCORMVIEWER = conf.read_param('DOCKER_SCORMVIEWER', default="authoring-scormviewer")
FILE_SCORMCOURSE = conf.read_param('FILE_SCORMCOURSE', default="share/scormcourse.zip")
os.makedirs("share", exist_ok=True)

################## SETTINGS END ##################
##################################################
SITE_ID = 1



# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',

    #third party dependencies:
    'corsheaders',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'rest_framework',
    'rest_framework.authtoken',
    'dj_rest_auth',
    'modeltranslation',
    'polymorphic',
    'ordered_model',

    # smart study apps
    'smartstudy_auth',
    'smartstudy_org_core',
    'smartstudy_assets',

    # own apps
    'authoring_core',
    'authoring_user',
    'authoring_course',
    'authoring_questionnaire',
    'authoring_intent',
    'authoring_exam',
    'authoring_task',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'SmartAuthoring.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'SmartAuthoring.wsgi.application'


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_L10N = True
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/



# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

LANGUAGE_CODE = 'en-us' #default language

LANGUAGES = [
    ('en', _('English')),
    ('de', _('German')),
]

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
]

# DRF Config
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
         'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ]
}

# Smartstudy auth config
SMART_STUDY_AUTH_USER_MODEL = 'authoring_user.AuthoringUser'
SMART_STUDY_AUTH_PERSON_MODEL = 'authoring_user.AuthoringPerson'
SMART_STUDY_AUTH_INVITE_MODEL = 'authoring_user.AuthoringInvite'
SMART_STUDY_AUTH_REGISTER_SERIALIZER = 'authoring_user.serializers.register.AuthoringRegisterSerializer'



SMART_STUDY_AUTH_PASSWORD_RESET_URL = SMART_STUDY_FRONTEND_URL + '/resetPassword'
SMART_STUDY_AUTH_EMAIL_CONFIRM_URL = SMART_STUDY_FRONTEND_URL + '/login'
SMART_STUDY_AUTH_INVITE_REDEEM_URL = SMART_STUDY_FRONTEND_URL + '/signup'

# Smartstudy org core config
SMART_STUDY_ORGANIZATION_MODEL = 'authoring_core.Organization'
SMART_STUDY_ORGANIZATION_MEMBERSHIP_MODEL = 'authoring_core.OrganizationMembership'
SMART_STUDY_ORGANIZATION_ROLE_MODEL = 'authoring_core.OrganizationRole'
SMART_STUDY_ORGANIZATION_UNIT_MODEL = 'authoring_core.OrganizationUnit'
SMART_STUDY_ORGANIZATION_UNIT_MEMBERSHIP_MODEL = 'authoring_core.OrganizationUnitMembership'
SMART_STUDY_ORGANIZATION_UNIT_ROLE_MODEL = 'authoring_core.OrganizationUnitRole'




DEFAULT_LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'formatters': {
        'django.server': {
            '()': 'django.utils.log.ServerFormatter',
            'format': '[{server_time}] {message}',
            'style': '{',
        }
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
        },
        'django.server': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'django.server',
        },
        'mail_admins': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler'
        }
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'mail_admins'],
            'level': 'INFO',
        },
        'django.server': {
            'handlers': ['django.server'],
            'level': 'INFO',
            'propagate': False,
        },
        'daphne': {
            'handlers': ['console'],
            'level': 'DEBUG'
        },
    },
}


 # DEBUG SETTINGS:
if DEBUG:
    INSTALLED_APPS.append('drf_spectacular')

    SPECTACULAR_SETTINGS = {
        'TITLE': 'SmartAuthoring API',
        'DESCRIPTION': 'This is the API documentation for the SmartAuthoring Tool',
        'VERSION': SMARTAUTHORING_VERSION,
        'SERVE_INCLUDE_SCHEMA': False,
        'SCHEMA_PATH_PREFIX': '/v[0-9+]/',
        'SCHEMA_PATH_PREFIX_TRIM': False,
        'COMPONENT_SPLIT_PATCH': False,
    }

    REST_FRAMEWORK['DEFAULT_SCHEMA_CLASS'] = 'drf_spectacular.openapi.AutoSchema'